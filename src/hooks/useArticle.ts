import { useState, useCallback, useEffect } from "react";

const BASE_URL = "https://yocaco-backend.onrender.com";

// --- TypeScript Interfaces for Type Safety ---

interface IArticle {
    // Assuming an ID is generated by the backend and used for fetching
    title: string;
    excerpt: string;
    article: string;
    author: string | null;
    readTime: string | null;
    date: string | null;
    category: string;
    image: string[] | null;
    tags: string[];
    status: 'draft' | 'published' | 'archived';
}

interface IHookState<T> {
    loading: boolean;
    data: T | null;
    error: Error | null;
    successful: boolean | null;
}

/**
 * Custom hook for managing article data (fetching and creation).
 * @returns An object containing state for fetching and creation, and the corresponding functions.
 */
const useArticle = () => {
    // State for fetching all articles
    const [articleState, setArticleState] = useState<IHookState<IArticle[]>>({
        loading: false,
        data: null,
        error: null,
        successful: null
    });
   // get article by id state
    const [getArticleByIdState, setGetArticleByIdState] = useState<IHookState<IArticle>>({
        loading: false,
        data: null,
        error: null,
        successful: null
    });

    // --- Core API Functions ---

    /**
     * Fetches all articles from the API.
     */
    const fetchArticle = useCallback(async () => {
        setArticleState({ loading: true, data: null, error: null, successful: null });
        try {
            const response = await fetch(`${BASE_URL}/api/article/get-articles-by-status/published`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                },
            });

            // IMPORTANT: Check for non-200 HTTP status codes
            if (!response.ok) {
                // Read error message from body if available
                const errorBody = await response.json().catch(() => ({ message: 'Failed to fetch data' }));
                throw new Error(`HTTP Error ${response.status}: ${errorBody.message || response.statusText}`);
            }

            const data: IArticle[] = await response.json();
            setArticleState({ loading: false, data: data['data'], error: null, successful: null });
        } catch (error) {
            // Network error or thrown HTTP error
            console.error("Error fetching articles:", error);
            setArticleState({ loading: false, data: null, error: error as Error , successful: null});
        }
    }, []); // Empty dependency array means this function is only created once

    /// get article by id
    const getArticleById = useCallback(async (id: string) => {
        setGetArticleByIdState({ loading: true, data: null, error: null, successful: null });
        try {
            const response = await fetch(`${BASE_URL}/api/article/get-article-by-id/${id}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                },
            });

            // IMPORTANT: Check for non-200 HTTP status codes
            if (!response.ok) {
                // Read error message from body if available
                const errorBody = await response.json().catch(() => ({ message: 'Failed to fetch data' }));
                throw new Error(`HTTP Error ${response.status}: ${errorBody.message || response.statusText}`);
            }

            const data: IArticle = await response.json();
            setGetArticleByIdState({ loading: false, data: data['data'], error: null, successful: true });
        } catch (error) {
            // Network error or thrown HTTP error
            console.error("Error fetching article by id:", error);
            setGetArticleByIdState({ loading: false, data: null, error: error as Error, successful: null });
        }
    }, []); // Empty dependency array means this function is only created once
     
    
        // Fetch articles automatically on component mount
    useEffect(() => {
        fetchArticle();
    }, [fetchArticle]); // fetchArticle is a dependency but is stable due to useCallback

    return { articleState, fetchArticle , getArticleByIdState, getArticle:getArticleById };
};

export default useArticle;
